Introduction
At times I needs to investigate how particular data buffer is processed. In such cases it can be deep inside of an imaging pipeline and/or data compression routines. If particular functionality is covered by a unit test that makes it simpler, but alas this is not always the case. 

A general approach to is to isolate a buffer of data being processed, extract it to a file. After that point it or procedure can be analized separatelly or the data can be used to create a unit test. At this instance there two ways of capturing the buffer either by modifying the source and adding the data dump logic (ex. fopen/fwrite/close) or restarting the debug with WinDBG and using writemem extention. 

Neither one of the above is a nice alternative as both require restaring of the debug session and one of them requires recompilation of the sources which may time consuming. Hence the VsDebugHelper addin was born. VsDebugHelper addin allows to capture a buffer of a program being debugged into a file and/or bring in the content of a file into a buffer. 


Using the Add-in
Once installed/loaded the plugin adds two commands (writemem, readmem) to Visual Studio environment, which can be executed from the Command window

Commands
writemem/readmem are inspired WinDBG extention and provide a subset of functionality.

writemem -- FileName address length
	Filename -- destination file name
	address -- starting address of the buffer. This can be pointer variable name
	length -- length of the data to be copied
readmem -- Read Memory from File
	Attention: To see the effect of readmem in Visual Studio you need 'step' after readmem was called.
	Filename -- source file name
	address -- starting address of the buffer. This can be pointer variable name
	length -- length of the data to be copied

Making the addin
Visual Studio has a number of extensebility technologies, but useful documentation is very dificult to find. Additionaly, there significant disconnect as what is available to managed extetions vs unmanaged extentions. It is rather clear that Visual Studio is unmanaged application as all extention objects are managed wrappers atop of COM objects yet there is no information how to interact from unmanaged addin and particulary in 'Visualizer' area the functioality is clearly cut off.

Besides being a nucance this precents an issue that there is no way to work through Visual Studio to modify a region of memory, hence Watch and Memory Window display may be out of sync with actual memory contents. A proper way would be for Visual Studio to provide and interface similar to Expression Evaluators plugin, which would give a hint to VS to update the correspoing user interface elements.

